<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sic.marktory.comment.query.mapper.CommentMapper">
    <resultMap id="commentResultMap" type="com.sic.marktory.comment.query.dto.CommentDTO">
        <id property="id" column="id"/>
        <result property="type" column="type"/>
        <result property="aboveId" column="above_id"/>
        <result property="level" column="level"/>
        <result property="sortPath" column="sort_path"/>
        <result property="content" column="content"/>
        <result property="writtenDate" column="written_date"/>
        <result property="modifyDate" column="modify_date"/>
        <result property="nickname" column="nickname"/>
        <result property="likesCount" column="likes_count"/>
    </resultMap>
    <select id="selectCommentsByPostId" resultMap="commentResultMap">
        WITH RECURSIVE comment_tree AS (
            SELECT
                   c.id
                 , c.above_id
                 , c.post_id
                 , c.content
                 , c.written_date
                 , c.modify_date
                 , c.type
                 , m.nickname
                 , 1 AS level
                 , CAST(LPAD(c.id, 5, '0') AS VARCHAR(255)) AS sort_path
              FROM comment c
              JOIN member m ON c.member_id = m.id
             WHERE c.post_id = #{postId} AND c.type = 1 AND c.is_deleted = FALSE

            UNION ALL

            SELECT
                   c.id
                 , c.above_id
                 , c.post_id
                 , c.content
                 , c.written_date
                 , c.modify_date
                 , c.type
                 , m.nickname
                 , ct.level + 1 AS level
                 , CONCAT(ct.sort_path, '-', LPAD(c.id, 5, '0')) AS sort_path
              FROM comment c
              JOIN member m ON c.member_id = m.id
              JOIN comment_tree ct ON c.above_id = ct.id
             WHERE c.post_id = #{postId} AND c.type = 2 AND c.is_deleted = FALSE
        )

        SELECT
               ct.id
             , ct.type
             , ct.above_id
             , ct.level
             , ct.sort_path
             , ct.content
             , ct.written_date
             , ct.modify_date
             , ct.nickname
             , COUNT(l.id) as likes_count
          FROM comment_tree ct
          LEFT JOIN likes l ON ct.id = l.comment_id and l.type = 'comment'
         GROUP BY ct.id, ct.content, ct.written_date, ct.modify_date, ct.nickname
         ORDER BY ct.sort_path;
    </select>
    <select id="selectReplyCommentsByAboveId" resultMap="commentResultMap">
        SELECT
               c.id
             , c.type
             , c.above_id
             , c.content
             , c.written_date
             , c.modify_date
             , u.nickname
             , COUNT(l.id) AS likes_count
          FROM comment c
          JOIN member u ON c.member_id = u.id
          LEFT JOIN likes l ON c.id = l.comment_id AND l.type = 'comment'
         WHERE c.above_id = #{aboveId} AND c.type = 2 AND c.is_deleted = FALSE
         GROUP BY c.id, c.content, c.written_date, c.modify_date, u.nickname
         ORDER BY c.written_date ASC;
    </select>
</mapper>